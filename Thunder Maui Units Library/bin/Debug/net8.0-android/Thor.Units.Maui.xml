<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thor.Units.Maui</name>
    </assembly>
    <members>
        <member name="T:Thor.Units.DataString">
            <summary>
            Summary description for DataString.
            </summary>
        </member>
        <member name="M:Thor.Units.DataString.SetUnit(System.String)">
            <summary>
            Sets the unit of the data string.
            </summary>
            <param name="unitSymbol">Symbol of unit to set the datastring to.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="P:Thor.Units.DataString.Unit">
            <summary>
            Gets a reference to the current unit of the data string.
            </summary>
        </member>
        <member name="P:Thor.Units.DataString.Flags">
            <summary>
            Gets or sets the flags on this data string.
            </summary>
        </member>
        <member name="P:Thor.Units.DataString.Converter">
            <summary>
            Gets the unit converter associated with this data string.
            </summary>
        </member>
        <member name="M:Thor.Units.DataString.SetValue(System.String)">
            <summary>
            Given a string in the format "[value] [unit]" parses and applies the value and unit.
            </summary>
            <param name="entry">Formatted string containing value and unit.</param>
            <returns>Unit result code.</returns>
        </member>
        <member name="M:Thor.Units.DataString.SetValue(System.Double)">
            <summary>
            Sets a value in the currently set unit format.
            </summary>
            <param name="val">Value to set the data string to.</param>
            <returns>Unit result code.</returns>
        </member>
        <member name="M:Thor.Units.DataString.GetValue(System.Double@)">
            <summary>
            Gets the current value of the data string in the currently set unit.
            </summary>
            <param name="output">Variable to hold the output.</param>
            <returns>Unit result code.</returns>
        </member>
        <member name="M:Thor.Units.DataString.GetValue(System.String@)">
            <summary>
            Gets the current value of the data string in string form.
            </summary>
            <param name="output">Variable to hold the data string output.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.DataString.GetValueAs(System.String,System.Double@)">
            <summary>
            Gets the value of the data string in the specified units.
            </summary>
            <param name="unitSymbol">Symbol of the unit to retrieve the data in.</param>
            <param name="output">Variable to hold the resultant value.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.DataString.GetValueAs(System.String,System.String@)">
            <summary>
            Gets the current value of the data string as string form in the specified units.
            </summary>
            <param name="unitSymbol">Unit to return the data string as.</param>
            <param name="output">Varialbe to hold the output of the method call.</param>
            <returns>Unit result code.</returns>
        </member>
        <member name="M:Thor.Units.DataString.ValidateEntry(System.String)">
            <summary>
            Validates input to the data string.
            </summary>
            <param name="entry">String to validate (in the form "[value] [unit]").</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.DataString.SetMaxBound(System.Double,System.String)">
            <summary>
            Sets the maximum bound of the data string.
            </summary>
            <param name="maxbound">Value of the maximum bound.</param>
            <param name="unitSymbol">The units the maximum bound is given in.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.DataString.SetMinBound(System.Double,System.String)">
            <summary>
            Sets the minimum bound of the data string.
            </summary>
            <param name="minbound">Value of the minimum bound.</param>
            <param name="unitSymbol">The units the minimum bound is given in.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.DataString.ToString">
            <summary>
            Gets a string representation of the data string.
            </summary>
            <returns>The string representation of the data string.</returns>
        </member>
        <member name="M:Thor.Units.DataString.op_Addition(Thor.Units.DataString,Thor.Units.DataString)">
            <summary>
            Adds two datastrings together.
            </summary>
        </member>
        <member name="M:Thor.Units.DataString.op_Subtraction(Thor.Units.DataString,Thor.Units.DataString)">
            <summary>
            Subtracts two datastrings.
            </summary>
        </member>
        <member name="M:Thor.Units.DataString.op_Multiply(Thor.Units.DataString,Thor.Units.DataString)">
            <summary>
            Multiplies two datastrings.
            </summary>
        </member>
        <member name="M:Thor.Units.DataString.op_Division(Thor.Units.DataString,Thor.Units.DataString)">
            <summary>
            Divides two datastrings.
            </summary>
        </member>
        <member name="F:Thor.Units.DataStringFlags.ForceUnit">
            <summary>
            Stops the data string unit being changed by reading user input.
            </summary>
        </member>
        <member name="F:Thor.Units.DataStringFlags.UseMaxBound">
            <summary>
            Enforces a maximum value on the data string.
            </summary>
        </member>
        <member name="F:Thor.Units.DataStringFlags.UseMinBound">
            <summary>
            Enforces a minimum value on the data string.
            </summary>
        </member>
        <member name="T:Thor.Units.UnitEventHandler">
            <summary>
            The method form for the unit conversion classes event handling.
            </summary>
        </member>
        <member name="T:Thor.Units.GroupTable">
            <summary>
            Contains a table of unit groups.
            </summary>
        </member>
        <member name="M:Thor.Units.GroupTable.#ctor">
            <summary>
            Constructor, clears the table and readies it for use.
            </summary>
        </member>
        <member name="P:Thor.Units.GroupTable.Item(System.String)">
            <summary>
            Given a unit name as the key, returns the associated unit entry.
            </summary>
        </member>
        <member name="M:Thor.Units.GroupTable.GetAllGroups">
            <summary>
            Gets an array of all the groups in the group table.
            </summary>
            <returns>Array of UnitGroup objects representing all of the groups in the group table.</returns>
        </member>
        <member name="M:Thor.Units.GroupTable.GetAllGroupNames">
            <summary>
            Gets an array of the names of the groups in the group table.
            </summary>
        </member>
        <member name="T:Thor.Units.InterfaceFactory">
            <summary>
            Public class that allows instantiation of the unit converter.
            </summary>
            <remarks>
            LAE: The concepts of an interface and interface factory lead me to believe that this was designed with some expansion in
            mind.  But since we don't use that, maybe we simplify this and just have the UnitConvert class with a public constructor.
            </remarks>
        </member>
        <member name="T:Thor.Units.IUnitConverter">
            <summary>
            Interface to the unit converter.
            </summary>
        </member>
        <member name="T:Thor.Units.IUnitEntry">
            <summary>
            Interface to the unit entry class.
            </summary>
        </member>
        <member name="T:Thor.Units.SymbolTable">
            <summary>
            Contains a table, mapping unit symbols to the unit class.
            </summary>
        </member>
        <member name="M:Thor.Units.SymbolTable.#ctor">
            <summary>
            Constructor, clears the table and readies it for use.
            </summary>
        </member>
        <member name="P:Thor.Units.SymbolTable.Item(System.String)">
            <summary>
            Given a symbol as the key, returns the associated unit entry.
            </summary>
        </member>
        <member name="T:Thor.Units.UnitResult">
            <summary>
            Enumeration containing the unit converter method
            return values.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.NoError">
            <summary>
            No error occured.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.GenericError">
            <summary>
            A general error occured.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.FileNotFound">
            <summary>
            A reqiured file was not found.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.BadUnitFile">
            <summary>
            Unit file was corrupt or invalid.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.UnitNotFound">
            <summary>
            Specified unit was not found.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.GroupNotFound">
            <summary>
            Specified unit group was not found.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.UnitExists">
            <summary>
            Unit exists.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.BadUnit">
            <summary>
            Specified unit was invalid.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.BadValue">
            <summary>
            Specified value was invalid.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.UnitMismatch">
            <summary>
            Two units were used that are not in the same group.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.ValueTooHigh">
            <summary>
            An input value was too high.
            </summary>
        </member>
        <member name="F:Thor.Units.UnitResult.ValueTooLow">
            <summary>
            An input value was too low.
            </summary>
        </member>
        <member name="T:Thor.Units.UnitConverter">
            <summary>
            Unit conversion class, contains methods for loading a unit file
            and converting units.
            </summary>
        </member>
        <member name="E:Thor.Units.UnitConverter.OnError">
            <summary>
            Called when an error occurs in the unit converter.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitConverter.#ctor">
            <summary>
            Constructor, sets up the unit converter.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitConverter.InitTables">
            <summary>
            Initialization.
            </summary>
        </member>
        <member name="P:Thor.Units.UnitConverter.Units">
            <summary>
            Units.
            </summary>
        </member>
        <member name="P:Thor.Units.UnitConverter.Groups">
            <summary>
            Groups.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitConverter.SendUnitFileWarning(System.String,System.String,System.Object[])">
            <summary>
            Sends a specially formed error message regarding the loading of a unit file.
            </summary>
            <param name="message">Message to send.</param>
            <param name="filePath">Path of the unit file.</param>
            <param name="args">Optional format arguments.</param>
        </member>
        <member name="M:Thor.Units.UnitConverter.LoadUnitsFile(System.String)">
            <summary>
            Given the path to a units file, loads the file.
            </summary>
            <param name="filePath">Path to a units file.</param>
            <returns>Unit result code.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.ParseGroupXMLNode(System.String,System.Xml.XmlNode)">
            <summary>
            Parses a group node in the unit XML document.
            </summary>
            <param name="groupnode">The XML node to parse.</param>
            <returns>A unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.ParseUnitXMLNode(System.String,Thor.Units.UnitGroup,System.Xml.XmlNode)">
            <summary>
            Parses an XML node that represents a unit.
            </summary>
            <param name="groupName">Name of the group this unit is in.</param>
            <param name="unitnode">The node containing the unit information.</param>
            <returns>A unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.GetUnitByName(System.String)">
            <summary>
            Given the full name of the unit, returns the unit entry.
            </summary>
            <param name="unitName">Name of the unit.</param>
            <returns>Reference to the unit entry, or null if not found.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.GetUnitBySymbol(System.String)">
            <summary>
            Given a unit symbol, gets the unit entry.
            </summary>
            <param name="unitSymbol">Symbol of the unit.</param>
            <returns>Reference to the unit entry, or null if symbol does not exist.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.CompatibleUnits(System.String,System.String)">
            <summary>
            Gets a value that determines whether the given units are compatible or not.
            </summary>
            <param name="unitSymbol1">Symbol for the first unit.</param>
            <param name="unitSymbol2">Symbol for the second unit.</param>
            <returns>True if units are compatible, else false.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.GetListOfUnitsInGroup(System.String)">
            <summary>
            Returns a list of all the units in a given group.
            </summary>
            <param name="groupName">Name of group to extract names from.</param>
        </member>
        <member name="M:Thor.Units.UnitConverter.CreateNewGroup(System.String)">
            <summary>
            Creates a new unit group and adds it to the group table.
            </summary>
            <param name="groupName">Name of the new group.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.AddUnitToGroup(System.String,System.String)">
            <summary>
            Adds the named unit to the specified group.
            </summary>
            <param name="unitName">Name of the unit.</param>
            <param name="groupName">Name of the group to add the unit to.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.GetUnitGroup(System.String)">
            <summary>
            Given the name of a unit, searches for the unit group it belongs to.
            </summary>
            <param name="unitName">Name of the unit.</param>
            <returns>The group the unit is in, or null if the unit is not valid.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.ConvertToStandard(System.Double,System.String,System.Double@)">
            <summary>
            Given a value and the current unit, converts the value back to the standard.
            </summary>
            <param name="val">Value to convert.</param>
            <param name="unitfrom">Name of the current units the value is in.</param>
            <param name="output">Variable to hold the converted value.</param>
            <returns>A unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.ConvertUnits(System.Double,System.String,System.String,System.Double@)">
            <summary>
            Performs a unit conversion between two units, given a value to convert.
            </summary>
            <param name="val">The value to convert.</param>
            <param name="unitfrom">The name of the unit the value is currently in.</param>
            <param name="unitto">The name of the unit that the value is to be converted to.</param>
            <param name="output">The converted value.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.ConvertFromStandard(System.Double,System.String,System.Double@)">
            <summary>
            Performs a unit conversion from the standard value into the specified unit.
            </summary>
            <param name="val">The value to convert.</param>
            <param name="unitto">The name of the unit that the value is to be converted to.</param>
            <param name="output">The converted value.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.ParseNumberString(System.String,System.Double@)">
            <summary>
            Parses a number string with operators.
            </summary>
            <param name="input">String containing numbers and operators.</param>
            <param name="val">Output value.</param>
        </member>
        <member name="M:Thor.Units.UnitConverter.ParseUnitString(System.String,System.Double@,System.String@)">
            <summary>
            Given a string in the format "[value] [unit]", splits and returns the parts.
            </summary>
            <param name="input">Input string in the format "[value] [unit]" to be parsed.</param>
            <param name="val">Output variable that will hold the value.</param>
            <param name="unit">Output variable that will hold the unit.</param>
            <returns>Unit result code.</returns>
        </member>
        <member name="M:Thor.Units.UnitConverter.CreateDataString">
            <summary>
            Creates a new data string, used as a bridge to the user interface.
            </summary>
            <returns>The newly created data string.</returns>
        </member>
        <member name="T:Thor.Units.UnitEntry">
            <summary>
            Represents a single unit loaded from the units file.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitEntry.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Thor.Units.UnitEventArgs">
            <summary>
            Represents a set of parameters sent with events generated
            by the unit conversion class.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of unit event arguments.
            </summary>
            <param name="message">Message to send with the event.</param>
            <param name="detailmessage">More detail to send with the event.</param>
        </member>
        <member name="M:Thor.Units.UnitEventArgs.#ctor(System.String)">
            <summary>
            Creates an instance of unit event arguments.
            </summary>
            <param name="message">Message to send with the event.</param>
        </member>
        <member name="P:Thor.Units.UnitEventArgs.Message">
            <summary>
            Gets a small message associated with the event.
            </summary>
        </member>
        <member name="P:Thor.Units.UnitEventArgs.DetailMessage">
            <summary>
            Gets a more detailed message associated with the event.
            </summary>
        </member>
        <member name="T:Thor.Units.UnitFileException">
            <summary>
            Represents an exception generated when reading the unit file.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitFileException.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the unit file exception.
            </summary>
            <param name="message">Message to send with the exception.</param>
            <param name="detail">Additional details about the exception.</param>
        </member>
        <member name="M:Thor.Units.UnitFileException.#ctor(System.String)">
            <summary>
            Creates an instance of the unit file exception.
            </summary>
            <param name="message">Message to send with the exception.</param>
        </member>
        <member name="P:Thor.Units.UnitFileException.Detail">
            <summary>
            Gets additional details about the exception.
            </summary>
        </member>
        <member name="T:Thor.Units.UnitGroup">
            <summary>
            Represents a group of units (i.e Temperature, Speed etc..).
            </summary>
        </member>
        <member name="M:Thor.Units.UnitGroup.AddUnit(Thor.Units.UnitEntry)">
            <summary>
            Adds a unit to the group.
            </summary>
            <param name="unit">Unit to add to the group.</param>
            <returns>Unit result value.</returns>
        </member>
        <member name="M:Thor.Units.UnitGroup.IsInGroup(System.String)">
            <summary>
            Gets a value that determines whether or not the specified unit
            is in the group.
            </summary>
            <param name="unitName">Name of the unit to search for.</param>
            <returns>True if the unit is in the group, else false.</returns>
        </member>
        <member name="T:Thor.Units.UnitTable">
            <summary>
            Contains a table, mapping units to their names.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitTable.#ctor">
            <summary>
            Constructor, clears the table and readies it for use.
            </summary>
        </member>
        <member name="P:Thor.Units.UnitTable.Item(System.String)">
            <summary>
            Given a unit name as the key, returns the associated unit entry.
            </summary>
        </member>
        <member name="M:Thor.Units.UnitTable.GetAllUnitNames">
            <summary>
            Get a list of all the names of the UnitEntrys in this UnitTable.
            </summary>
        </member>
    </members>
</doc>
